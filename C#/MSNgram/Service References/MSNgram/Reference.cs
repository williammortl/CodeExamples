//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MSNgram {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TokenSet", Namespace="http://schemas.microsoft.com/research/2009/10/webngram/fanout")]
    [System.SerializableAttribute()]
    public partial class TokenSet : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float backoffField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string cookieField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float[] probabilitiesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] wordsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float backoff {
            get {
                return this.backoffField;
            }
            set {
                if ((this.backoffField.Equals(value) != true)) {
                    this.backoffField = value;
                    this.RaisePropertyChanged("backoff");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string cookie {
            get {
                return this.cookieField;
            }
            set {
                if ((object.ReferenceEquals(this.cookieField, value) != true)) {
                    this.cookieField = value;
                    this.RaisePropertyChanged("cookie");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float[] probabilities {
            get {
                return this.probabilitiesField;
            }
            set {
                if ((object.ReferenceEquals(this.probabilitiesField, value) != true)) {
                    this.probabilitiesField = value;
                    this.RaisePropertyChanged("probabilities");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] words {
            get {
                return this.wordsField;
            }
            set {
                if ((object.ReferenceEquals(this.wordsField, value) != true)) {
                    this.wordsField = value;
                    this.RaisePropertyChanged("words");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WordBreakerResultSet", Namespace="http://schemas.microsoft.com/research/2009/10/webngram/fanout")]
    [System.SerializableAttribute()]
    public partial class WordBreakerResultSet : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double[] logprobabilitiesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] resultsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double[] logprobabilities {
            get {
                return this.logprobabilitiesField;
            }
            set {
                if ((object.ReferenceEquals(this.logprobabilitiesField, value) != true)) {
                    this.logprobabilitiesField = value;
                    this.RaisePropertyChanged("logprobabilities");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] results {
            get {
                return this.resultsField;
            }
            set {
                if ((object.ReferenceEquals(this.resultsField, value) != true)) {
                    this.resultsField = value;
                    this.RaisePropertyChanged("results");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://schemas.microsoft.com/research/2011/08/wiab", ConfigurationName="MSNgram.IWiabService")]
    public interface IWiabService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.microsoft.com/research/2011/08/wiab/IWiabService/GetModels", ReplyAction="http://schemas.microsoft.com/research/2011/08/wiab/IWiabService/GetModelsResponse" +
            "")]
        string[] GetModels();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.microsoft.com/research/2011/08/wiab/IWiabService/GetModels", ReplyAction="http://schemas.microsoft.com/research/2011/08/wiab/IWiabService/GetModelsResponse" +
            "")]
        System.Threading.Tasks.Task<string[]> GetModelsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.microsoft.com/research/2011/08/wiab/IWiabService/GetModelsForWordB" +
            "reaker", ReplyAction="http://schemas.microsoft.com/research/2011/08/wiab/IWiabService/GetModelsForWordB" +
            "reakerResponse")]
        string[] GetModelsForWordBreaker();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.microsoft.com/research/2011/08/wiab/IWiabService/GetModelsForWordB" +
            "reaker", ReplyAction="http://schemas.microsoft.com/research/2011/08/wiab/IWiabService/GetModelsForWordB" +
            "reakerResponse")]
        System.Threading.Tasks.Task<string[]> GetModelsForWordBreakerAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.microsoft.com/research/2011/08/wiab/IWiabService/GetModelsForPhras" +
            "eBreaker", ReplyAction="http://schemas.microsoft.com/research/2011/08/wiab/IWiabService/GetModelsForPhras" +
            "eBreakerResponse")]
        string[] GetModelsForPhraseBreaker();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.microsoft.com/research/2011/08/wiab/IWiabService/GetModelsForPhras" +
            "eBreaker", ReplyAction="http://schemas.microsoft.com/research/2011/08/wiab/IWiabService/GetModelsForPhras" +
            "eBreakerResponse")]
        System.Threading.Tasks.Task<string[]> GetModelsForPhraseBreakerAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.microsoft.com/research/2011/08/wiab/IWiabService/GetProbability", ReplyAction="http://schemas.microsoft.com/research/2011/08/wiab/IWiabService/GetProbabilityRes" +
            "ponse")]
        float GetProbability(string authorizationToken, string modelUrn, string phrase);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.microsoft.com/research/2011/08/wiab/IWiabService/GetProbability", ReplyAction="http://schemas.microsoft.com/research/2011/08/wiab/IWiabService/GetProbabilityRes" +
            "ponse")]
        System.Threading.Tasks.Task<float> GetProbabilityAsync(string authorizationToken, string modelUrn, string phrase);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.microsoft.com/research/2011/08/wiab/IWiabService/GetProbabilities", ReplyAction="http://schemas.microsoft.com/research/2011/08/wiab/IWiabService/GetProbabilitiesR" +
            "esponse")]
        float[] GetProbabilities(string authorizationToken, string modelUrn, string[] phrases);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.microsoft.com/research/2011/08/wiab/IWiabService/GetProbabilities", ReplyAction="http://schemas.microsoft.com/research/2011/08/wiab/IWiabService/GetProbabilitiesR" +
            "esponse")]
        System.Threading.Tasks.Task<float[]> GetProbabilitiesAsync(string authorizationToken, string modelUrn, string[] phrases);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.microsoft.com/research/2011/08/wiab/IWiabService/GetConditionalPro" +
            "bability", ReplyAction="http://schemas.microsoft.com/research/2011/08/wiab/IWiabService/GetConditionalPro" +
            "babilityResponse")]
        float GetConditionalProbability(string authorizationToken, string modelUrn, string phrase);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.microsoft.com/research/2011/08/wiab/IWiabService/GetConditionalPro" +
            "bability", ReplyAction="http://schemas.microsoft.com/research/2011/08/wiab/IWiabService/GetConditionalPro" +
            "babilityResponse")]
        System.Threading.Tasks.Task<float> GetConditionalProbabilityAsync(string authorizationToken, string modelUrn, string phrase);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.microsoft.com/research/2011/08/wiab/IWiabService/GetConditionalPro" +
            "babilities", ReplyAction="http://schemas.microsoft.com/research/2011/08/wiab/IWiabService/GetConditionalPro" +
            "babilitiesResponse")]
        float[] GetConditionalProbabilities(string authorizationToken, string modelUrn, string[] phrases);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.microsoft.com/research/2011/08/wiab/IWiabService/GetConditionalPro" +
            "babilities", ReplyAction="http://schemas.microsoft.com/research/2011/08/wiab/IWiabService/GetConditionalPro" +
            "babilitiesResponse")]
        System.Threading.Tasks.Task<float[]> GetConditionalProbabilitiesAsync(string authorizationToken, string modelUrn, string[] phrases);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.microsoft.com/research/2011/08/wiab/IWiabService/Generate", ReplyAction="http://schemas.microsoft.com/research/2011/08/wiab/IWiabService/GenerateResponse")]
        MSNgram.MSNgram.TokenSet Generate(string authorizationToken, string modelUrn, string phraseContext, int maxN, string cookie);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.microsoft.com/research/2011/08/wiab/IWiabService/Generate", ReplyAction="http://schemas.microsoft.com/research/2011/08/wiab/IWiabService/GenerateResponse")]
        System.Threading.Tasks.Task<MSNgram.MSNgram.TokenSet> GenerateAsync(string authorizationToken, string modelUrn, string phraseContext, int maxN, string cookie);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.microsoft.com/research/2011/08/wiab/IWiabService/WordBreak", ReplyAction="http://schemas.microsoft.com/research/2011/08/wiab/IWiabService/WordBreakResponse" +
            "")]
        MSNgram.MSNgram.WordBreakerResultSet WordBreak(string authorizationToken, string modelUrn, string text, int maxCandidates);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.microsoft.com/research/2011/08/wiab/IWiabService/WordBreak", ReplyAction="http://schemas.microsoft.com/research/2011/08/wiab/IWiabService/WordBreakResponse" +
            "")]
        System.Threading.Tasks.Task<MSNgram.MSNgram.WordBreakerResultSet> WordBreakAsync(string authorizationToken, string modelUrn, string text, int maxCandidates);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.microsoft.com/research/2011/08/wiab/IWiabService/PhraseBreak", ReplyAction="http://schemas.microsoft.com/research/2011/08/wiab/IWiabService/PhraseBreakRespon" +
            "se")]
        string PhraseBreak(string authToken, string modelUrn, string text, int maxPhraseLength, bool allowSinglePhrase);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.microsoft.com/research/2011/08/wiab/IWiabService/PhraseBreak", ReplyAction="http://schemas.microsoft.com/research/2011/08/wiab/IWiabService/PhraseBreakRespon" +
            "se")]
        System.Threading.Tasks.Task<string> PhraseBreakAsync(string authToken, string modelUrn, string text, int maxPhraseLength, bool allowSinglePhrase);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.microsoft.com/research/2011/08/wiab/IWiabService/PhraseBreakTree", ReplyAction="http://schemas.microsoft.com/research/2011/08/wiab/IWiabService/PhraseBreakTreeRe" +
            "sponse")]
        string PhraseBreakTree(string authToken, string modelUrn, string text, int maxPhraseLength);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.microsoft.com/research/2011/08/wiab/IWiabService/PhraseBreakTree", ReplyAction="http://schemas.microsoft.com/research/2011/08/wiab/IWiabService/PhraseBreakTreeRe" +
            "sponse")]
        System.Threading.Tasks.Task<string> PhraseBreakTreeAsync(string authToken, string modelUrn, string text, int maxPhraseLength);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IWiabServiceChannel : MSNgram.MSNgram.IWiabService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class WiabServiceClient : System.ServiceModel.ClientBase<MSNgram.MSNgram.IWiabService>, MSNgram.MSNgram.IWiabService {
        
        public WiabServiceClient() {
        }
        
        public WiabServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public WiabServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WiabServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WiabServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string[] GetModels() {
            return base.Channel.GetModels();
        }
        
        public System.Threading.Tasks.Task<string[]> GetModelsAsync() {
            return base.Channel.GetModelsAsync();
        }
        
        public string[] GetModelsForWordBreaker() {
            return base.Channel.GetModelsForWordBreaker();
        }
        
        public System.Threading.Tasks.Task<string[]> GetModelsForWordBreakerAsync() {
            return base.Channel.GetModelsForWordBreakerAsync();
        }
        
        public string[] GetModelsForPhraseBreaker() {
            return base.Channel.GetModelsForPhraseBreaker();
        }
        
        public System.Threading.Tasks.Task<string[]> GetModelsForPhraseBreakerAsync() {
            return base.Channel.GetModelsForPhraseBreakerAsync();
        }
        
        public float GetProbability(string authorizationToken, string modelUrn, string phrase) {
            return base.Channel.GetProbability(authorizationToken, modelUrn, phrase);
        }
        
        public System.Threading.Tasks.Task<float> GetProbabilityAsync(string authorizationToken, string modelUrn, string phrase) {
            return base.Channel.GetProbabilityAsync(authorizationToken, modelUrn, phrase);
        }
        
        public float[] GetProbabilities(string authorizationToken, string modelUrn, string[] phrases) {
            return base.Channel.GetProbabilities(authorizationToken, modelUrn, phrases);
        }
        
        public System.Threading.Tasks.Task<float[]> GetProbabilitiesAsync(string authorizationToken, string modelUrn, string[] phrases) {
            return base.Channel.GetProbabilitiesAsync(authorizationToken, modelUrn, phrases);
        }
        
        public float GetConditionalProbability(string authorizationToken, string modelUrn, string phrase) {
            return base.Channel.GetConditionalProbability(authorizationToken, modelUrn, phrase);
        }
        
        public System.Threading.Tasks.Task<float> GetConditionalProbabilityAsync(string authorizationToken, string modelUrn, string phrase) {
            return base.Channel.GetConditionalProbabilityAsync(authorizationToken, modelUrn, phrase);
        }
        
        public float[] GetConditionalProbabilities(string authorizationToken, string modelUrn, string[] phrases) {
            return base.Channel.GetConditionalProbabilities(authorizationToken, modelUrn, phrases);
        }
        
        public System.Threading.Tasks.Task<float[]> GetConditionalProbabilitiesAsync(string authorizationToken, string modelUrn, string[] phrases) {
            return base.Channel.GetConditionalProbabilitiesAsync(authorizationToken, modelUrn, phrases);
        }
        
        public MSNgram.MSNgram.TokenSet Generate(string authorizationToken, string modelUrn, string phraseContext, int maxN, string cookie) {
            return base.Channel.Generate(authorizationToken, modelUrn, phraseContext, maxN, cookie);
        }
        
        public System.Threading.Tasks.Task<MSNgram.MSNgram.TokenSet> GenerateAsync(string authorizationToken, string modelUrn, string phraseContext, int maxN, string cookie) {
            return base.Channel.GenerateAsync(authorizationToken, modelUrn, phraseContext, maxN, cookie);
        }
        
        public MSNgram.MSNgram.WordBreakerResultSet WordBreak(string authorizationToken, string modelUrn, string text, int maxCandidates) {
            return base.Channel.WordBreak(authorizationToken, modelUrn, text, maxCandidates);
        }
        
        public System.Threading.Tasks.Task<MSNgram.MSNgram.WordBreakerResultSet> WordBreakAsync(string authorizationToken, string modelUrn, string text, int maxCandidates) {
            return base.Channel.WordBreakAsync(authorizationToken, modelUrn, text, maxCandidates);
        }
        
        public string PhraseBreak(string authToken, string modelUrn, string text, int maxPhraseLength, bool allowSinglePhrase) {
            return base.Channel.PhraseBreak(authToken, modelUrn, text, maxPhraseLength, allowSinglePhrase);
        }
        
        public System.Threading.Tasks.Task<string> PhraseBreakAsync(string authToken, string modelUrn, string text, int maxPhraseLength, bool allowSinglePhrase) {
            return base.Channel.PhraseBreakAsync(authToken, modelUrn, text, maxPhraseLength, allowSinglePhrase);
        }
        
        public string PhraseBreakTree(string authToken, string modelUrn, string text, int maxPhraseLength) {
            return base.Channel.PhraseBreakTree(authToken, modelUrn, text, maxPhraseLength);
        }
        
        public System.Threading.Tasks.Task<string> PhraseBreakTreeAsync(string authToken, string modelUrn, string text, int maxPhraseLength) {
            return base.Channel.PhraseBreakTreeAsync(authToken, modelUrn, text, maxPhraseLength);
        }
    }
}
